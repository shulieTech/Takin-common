/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.shulie.takin.pinpoint.thrift.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2023-06-21")
public class TStressTestTracePayloadData implements org.apache.thrift.TBase<TStressTestTracePayloadData, TStressTestTracePayloadData._Fields>, java.io.Serializable, Cloneable, Comparable<TStressTestTracePayloadData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TStressTestTracePayloadData");

  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField AGENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("agentId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INVOKE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("invokeId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INVOKE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("invokeType", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField PRESSURE_TEST_FIELD_DESC = new org.apache.thrift.protocol.TField("pressureTest", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField ENTRANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("entrance", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField SERVER_FIELD_DESC = new org.apache.thrift.protocol.TField("server", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MIDDLEWARE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("middlewareName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField METHOD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("methodName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CALLBACK_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("callbackMsg", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField REQUEST_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestSize", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField RESPONSE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("responseSize", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField RPC_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("rpcContent", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TStressTestTracePayloadDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TStressTestTracePayloadDataTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.lang.String traceId; // required
  private long timestamp; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String agentId; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String invokeId; // required
  private byte invokeType; // required
  private boolean pressureTest; // required
  private boolean entrance; // required
  private boolean server; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String appName; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String middlewareName; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String serviceName; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String methodName; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String request; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String response; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String callbackMsg; // optional
  private int requestSize; // optional
  private int responseSize; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String ext; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String rpcContent; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRACE_ID((short)1, "traceId"),
    TIMESTAMP((short)2, "timestamp"),
    AGENT_ID((short)3, "agentId"),
    INVOKE_ID((short)4, "invokeId"),
    INVOKE_TYPE((short)5, "invokeType"),
    PRESSURE_TEST((short)6, "pressureTest"),
    ENTRANCE((short)7, "entrance"),
    SERVER((short)8, "server"),
    APP_NAME((short)9, "appName"),
    MIDDLEWARE_NAME((short)10, "middlewareName"),
    SERVICE_NAME((short)11, "serviceName"),
    METHOD_NAME((short)12, "methodName"),
    REQUEST((short)13, "request"),
    RESPONSE((short)14, "response"),
    CALLBACK_MSG((short)15, "callbackMsg"),
    REQUEST_SIZE((short)16, "requestSize"),
    RESPONSE_SIZE((short)17, "responseSize"),
    EXT((short)18, "ext"),
    RPC_CONTENT((short)19, "rpcContent");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRACE_ID
          return TRACE_ID;
        case 2: // TIMESTAMP
          return TIMESTAMP;
        case 3: // AGENT_ID
          return AGENT_ID;
        case 4: // INVOKE_ID
          return INVOKE_ID;
        case 5: // INVOKE_TYPE
          return INVOKE_TYPE;
        case 6: // PRESSURE_TEST
          return PRESSURE_TEST;
        case 7: // ENTRANCE
          return ENTRANCE;
        case 8: // SERVER
          return SERVER;
        case 9: // APP_NAME
          return APP_NAME;
        case 10: // MIDDLEWARE_NAME
          return MIDDLEWARE_NAME;
        case 11: // SERVICE_NAME
          return SERVICE_NAME;
        case 12: // METHOD_NAME
          return METHOD_NAME;
        case 13: // REQUEST
          return REQUEST;
        case 14: // RESPONSE
          return RESPONSE;
        case 15: // CALLBACK_MSG
          return CALLBACK_MSG;
        case 16: // REQUEST_SIZE
          return REQUEST_SIZE;
        case 17: // RESPONSE_SIZE
          return RESPONSE_SIZE;
        case 18: // EXT
          return EXT;
        case 19: // RPC_CONTENT
          return RPC_CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __INVOKETYPE_ISSET_ID = 1;
  private static final int __PRESSURETEST_ISSET_ID = 2;
  private static final int __ENTRANCE_ISSET_ID = 3;
  private static final int __SERVER_ISSET_ID = 4;
  private static final int __REQUESTSIZE_ISSET_ID = 5;
  private static final int __RESPONSESIZE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.APP_NAME,_Fields.MIDDLEWARE_NAME,_Fields.SERVICE_NAME,_Fields.METHOD_NAME,_Fields.REQUEST,_Fields.RESPONSE,_Fields.CALLBACK_MSG,_Fields.REQUEST_SIZE,_Fields.RESPONSE_SIZE,_Fields.EXT,_Fields.RPC_CONTENT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("traceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AGENT_ID, new org.apache.thrift.meta_data.FieldMetaData("agentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVOKE_ID, new org.apache.thrift.meta_data.FieldMetaData("invokeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVOKE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("invokeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PRESSURE_TEST, new org.apache.thrift.meta_data.FieldMetaData("pressureTest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENTRANCE, new org.apache.thrift.meta_data.FieldMetaData("entrance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SERVER, new org.apache.thrift.meta_data.FieldMetaData("server", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIDDLEWARE_NAME, new org.apache.thrift.meta_data.FieldMetaData("middlewareName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METHOD_NAME, new org.apache.thrift.meta_data.FieldMetaData("methodName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALLBACK_MSG, new org.apache.thrift.meta_data.FieldMetaData("callbackMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_SIZE, new org.apache.thrift.meta_data.FieldMetaData("requestSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESPONSE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("responseSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RPC_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("rpcContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStressTestTracePayloadData.class, metaDataMap);
  }

  public TStressTestTracePayloadData() {
  }

  public TStressTestTracePayloadData(
    java.lang.String traceId,
    long timestamp,
    java.lang.String agentId,
    java.lang.String invokeId,
    byte invokeType,
    boolean pressureTest,
    boolean entrance,
    boolean server)
  {
    this();
    this.traceId = traceId;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.agentId = agentId;
    this.invokeId = invokeId;
    this.invokeType = invokeType;
    setInvokeTypeIsSet(true);
    this.pressureTest = pressureTest;
    setPressureTestIsSet(true);
    this.entrance = entrance;
    setEntranceIsSet(true);
    this.server = server;
    setServerIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TStressTestTracePayloadData(TStressTestTracePayloadData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTraceId()) {
      this.traceId = other.traceId;
    }
    this.timestamp = other.timestamp;
    if (other.isSetAgentId()) {
      this.agentId = other.agentId;
    }
    if (other.isSetInvokeId()) {
      this.invokeId = other.invokeId;
    }
    this.invokeType = other.invokeType;
    this.pressureTest = other.pressureTest;
    this.entrance = other.entrance;
    this.server = other.server;
    if (other.isSetAppName()) {
      this.appName = other.appName;
    }
    if (other.isSetMiddlewareName()) {
      this.middlewareName = other.middlewareName;
    }
    if (other.isSetServiceName()) {
      this.serviceName = other.serviceName;
    }
    if (other.isSetMethodName()) {
      this.methodName = other.methodName;
    }
    if (other.isSetRequest()) {
      this.request = other.request;
    }
    if (other.isSetResponse()) {
      this.response = other.response;
    }
    if (other.isSetCallbackMsg()) {
      this.callbackMsg = other.callbackMsg;
    }
    this.requestSize = other.requestSize;
    this.responseSize = other.responseSize;
    if (other.isSetExt()) {
      this.ext = other.ext;
    }
    if (other.isSetRpcContent()) {
      this.rpcContent = other.rpcContent;
    }
  }

  public TStressTestTracePayloadData deepCopy() {
    return new TStressTestTracePayloadData(this);
  }

  @Override
  public void clear() {
    this.traceId = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.agentId = null;
    this.invokeId = null;
    setInvokeTypeIsSet(false);
    this.invokeType = 0;
    setPressureTestIsSet(false);
    this.pressureTest = false;
    setEntranceIsSet(false);
    this.entrance = false;
    setServerIsSet(false);
    this.server = false;
    this.appName = null;
    this.middlewareName = null;
    this.serviceName = null;
    this.methodName = null;
    this.request = null;
    this.response = null;
    this.callbackMsg = null;
    setRequestSizeIsSet(false);
    this.requestSize = 0;
    setResponseSizeIsSet(false);
    this.responseSize = 0;
    this.ext = null;
    this.rpcContent = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTraceId() {
    return this.traceId;
  }

  public void setTraceId(@org.apache.thrift.annotation.Nullable java.lang.String traceId) {
    this.traceId = traceId;
  }

  public void unsetTraceId() {
    this.traceId = null;
  }

  /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceId() {
    return this.traceId != null;
  }

  public void setTraceIdIsSet(boolean value) {
    if (!value) {
      this.traceId = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public void setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAgentId() {
    return this.agentId;
  }

  public void setAgentId(@org.apache.thrift.annotation.Nullable java.lang.String agentId) {
    this.agentId = agentId;
  }

  public void unsetAgentId() {
    this.agentId = null;
  }

  /** Returns true if field agentId is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentId() {
    return this.agentId != null;
  }

  public void setAgentIdIsSet(boolean value) {
    if (!value) {
      this.agentId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getInvokeId() {
    return this.invokeId;
  }

  public void setInvokeId(@org.apache.thrift.annotation.Nullable java.lang.String invokeId) {
    this.invokeId = invokeId;
  }

  public void unsetInvokeId() {
    this.invokeId = null;
  }

  /** Returns true if field invokeId is set (has been assigned a value) and false otherwise */
  public boolean isSetInvokeId() {
    return this.invokeId != null;
  }

  public void setInvokeIdIsSet(boolean value) {
    if (!value) {
      this.invokeId = null;
    }
  }

  public byte getInvokeType() {
    return this.invokeType;
  }

  public void setInvokeType(byte invokeType) {
    this.invokeType = invokeType;
    setInvokeTypeIsSet(true);
  }

  public void unsetInvokeType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INVOKETYPE_ISSET_ID);
  }

  /** Returns true if field invokeType is set (has been assigned a value) and false otherwise */
  public boolean isSetInvokeType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INVOKETYPE_ISSET_ID);
  }

  public void setInvokeTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INVOKETYPE_ISSET_ID, value);
  }

  public boolean isPressureTest() {
    return this.pressureTest;
  }

  public void setPressureTest(boolean pressureTest) {
    this.pressureTest = pressureTest;
    setPressureTestIsSet(true);
  }

  public void unsetPressureTest() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRESSURETEST_ISSET_ID);
  }

  /** Returns true if field pressureTest is set (has been assigned a value) and false otherwise */
  public boolean isSetPressureTest() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRESSURETEST_ISSET_ID);
  }

  public void setPressureTestIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRESSURETEST_ISSET_ID, value);
  }

  public boolean isEntrance() {
    return this.entrance;
  }

  public void setEntrance(boolean entrance) {
    this.entrance = entrance;
    setEntranceIsSet(true);
  }

  public void unsetEntrance() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENTRANCE_ISSET_ID);
  }

  /** Returns true if field entrance is set (has been assigned a value) and false otherwise */
  public boolean isSetEntrance() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENTRANCE_ISSET_ID);
  }

  public void setEntranceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENTRANCE_ISSET_ID, value);
  }

  public boolean isServer() {
    return this.server;
  }

  public void setServer(boolean server) {
    this.server = server;
    setServerIsSet(true);
  }

  public void unsetServer() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVER_ISSET_ID);
  }

  /** Returns true if field server is set (has been assigned a value) and false otherwise */
  public boolean isSetServer() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVER_ISSET_ID);
  }

  public void setServerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVER_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAppName() {
    return this.appName;
  }

  public void setAppName(@org.apache.thrift.annotation.Nullable java.lang.String appName) {
    this.appName = appName;
  }

  public void unsetAppName() {
    this.appName = null;
  }

  /** Returns true if field appName is set (has been assigned a value) and false otherwise */
  public boolean isSetAppName() {
    return this.appName != null;
  }

  public void setAppNameIsSet(boolean value) {
    if (!value) {
      this.appName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMiddlewareName() {
    return this.middlewareName;
  }

  public void setMiddlewareName(@org.apache.thrift.annotation.Nullable java.lang.String middlewareName) {
    this.middlewareName = middlewareName;
  }

  public void unsetMiddlewareName() {
    this.middlewareName = null;
  }

  /** Returns true if field middlewareName is set (has been assigned a value) and false otherwise */
  public boolean isSetMiddlewareName() {
    return this.middlewareName != null;
  }

  public void setMiddlewareNameIsSet(boolean value) {
    if (!value) {
      this.middlewareName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getServiceName() {
    return this.serviceName;
  }

  public void setServiceName(@org.apache.thrift.annotation.Nullable java.lang.String serviceName) {
    this.serviceName = serviceName;
  }

  public void unsetServiceName() {
    this.serviceName = null;
  }

  /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceName() {
    return this.serviceName != null;
  }

  public void setServiceNameIsSet(boolean value) {
    if (!value) {
      this.serviceName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMethodName() {
    return this.methodName;
  }

  public void setMethodName(@org.apache.thrift.annotation.Nullable java.lang.String methodName) {
    this.methodName = methodName;
  }

  public void unsetMethodName() {
    this.methodName = null;
  }

  /** Returns true if field methodName is set (has been assigned a value) and false otherwise */
  public boolean isSetMethodName() {
    return this.methodName != null;
  }

  public void setMethodNameIsSet(boolean value) {
    if (!value) {
      this.methodName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRequest() {
    return this.request;
  }

  public void setRequest(@org.apache.thrift.annotation.Nullable java.lang.String request) {
    this.request = request;
  }

  public void unsetRequest() {
    this.request = null;
  }

  /** Returns true if field request is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest() {
    return this.request != null;
  }

  public void setRequestIsSet(boolean value) {
    if (!value) {
      this.request = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getResponse() {
    return this.response;
  }

  public void setResponse(@org.apache.thrift.annotation.Nullable java.lang.String response) {
    this.response = response;
  }

  public void unsetResponse() {
    this.response = null;
  }

  /** Returns true if field response is set (has been assigned a value) and false otherwise */
  public boolean isSetResponse() {
    return this.response != null;
  }

  public void setResponseIsSet(boolean value) {
    if (!value) {
      this.response = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCallbackMsg() {
    return this.callbackMsg;
  }

  public void setCallbackMsg(@org.apache.thrift.annotation.Nullable java.lang.String callbackMsg) {
    this.callbackMsg = callbackMsg;
  }

  public void unsetCallbackMsg() {
    this.callbackMsg = null;
  }

  /** Returns true if field callbackMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetCallbackMsg() {
    return this.callbackMsg != null;
  }

  public void setCallbackMsgIsSet(boolean value) {
    if (!value) {
      this.callbackMsg = null;
    }
  }

  public int getRequestSize() {
    return this.requestSize;
  }

  public void setRequestSize(int requestSize) {
    this.requestSize = requestSize;
    setRequestSizeIsSet(true);
  }

  public void unsetRequestSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTSIZE_ISSET_ID);
  }

  /** Returns true if field requestSize is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTSIZE_ISSET_ID);
  }

  public void setRequestSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTSIZE_ISSET_ID, value);
  }

  public int getResponseSize() {
    return this.responseSize;
  }

  public void setResponseSize(int responseSize) {
    this.responseSize = responseSize;
    setResponseSizeIsSet(true);
  }

  public void unsetResponseSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSESIZE_ISSET_ID);
  }

  /** Returns true if field responseSize is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSESIZE_ISSET_ID);
  }

  public void setResponseSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSESIZE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getExt() {
    return this.ext;
  }

  public void setExt(@org.apache.thrift.annotation.Nullable java.lang.String ext) {
    this.ext = ext;
  }

  public void unsetExt() {
    this.ext = null;
  }

  /** Returns true if field ext is set (has been assigned a value) and false otherwise */
  public boolean isSetExt() {
    return this.ext != null;
  }

  public void setExtIsSet(boolean value) {
    if (!value) {
      this.ext = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRpcContent() {
    return this.rpcContent;
  }

  public void setRpcContent(@org.apache.thrift.annotation.Nullable java.lang.String rpcContent) {
    this.rpcContent = rpcContent;
  }

  public void unsetRpcContent() {
    this.rpcContent = null;
  }

  /** Returns true if field rpcContent is set (has been assigned a value) and false otherwise */
  public boolean isSetRpcContent() {
    return this.rpcContent != null;
  }

  public void setRpcContentIsSet(boolean value) {
    if (!value) {
      this.rpcContent = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TRACE_ID:
      if (value == null) {
        unsetTraceId();
      } else {
        setTraceId((java.lang.String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case AGENT_ID:
      if (value == null) {
        unsetAgentId();
      } else {
        setAgentId((java.lang.String)value);
      }
      break;

    case INVOKE_ID:
      if (value == null) {
        unsetInvokeId();
      } else {
        setInvokeId((java.lang.String)value);
      }
      break;

    case INVOKE_TYPE:
      if (value == null) {
        unsetInvokeType();
      } else {
        setInvokeType((java.lang.Byte)value);
      }
      break;

    case PRESSURE_TEST:
      if (value == null) {
        unsetPressureTest();
      } else {
        setPressureTest((java.lang.Boolean)value);
      }
      break;

    case ENTRANCE:
      if (value == null) {
        unsetEntrance();
      } else {
        setEntrance((java.lang.Boolean)value);
      }
      break;

    case SERVER:
      if (value == null) {
        unsetServer();
      } else {
        setServer((java.lang.Boolean)value);
      }
      break;

    case APP_NAME:
      if (value == null) {
        unsetAppName();
      } else {
        setAppName((java.lang.String)value);
      }
      break;

    case MIDDLEWARE_NAME:
      if (value == null) {
        unsetMiddlewareName();
      } else {
        setMiddlewareName((java.lang.String)value);
      }
      break;

    case SERVICE_NAME:
      if (value == null) {
        unsetServiceName();
      } else {
        setServiceName((java.lang.String)value);
      }
      break;

    case METHOD_NAME:
      if (value == null) {
        unsetMethodName();
      } else {
        setMethodName((java.lang.String)value);
      }
      break;

    case REQUEST:
      if (value == null) {
        unsetRequest();
      } else {
        setRequest((java.lang.String)value);
      }
      break;

    case RESPONSE:
      if (value == null) {
        unsetResponse();
      } else {
        setResponse((java.lang.String)value);
      }
      break;

    case CALLBACK_MSG:
      if (value == null) {
        unsetCallbackMsg();
      } else {
        setCallbackMsg((java.lang.String)value);
      }
      break;

    case REQUEST_SIZE:
      if (value == null) {
        unsetRequestSize();
      } else {
        setRequestSize((java.lang.Integer)value);
      }
      break;

    case RESPONSE_SIZE:
      if (value == null) {
        unsetResponseSize();
      } else {
        setResponseSize((java.lang.Integer)value);
      }
      break;

    case EXT:
      if (value == null) {
        unsetExt();
      } else {
        setExt((java.lang.String)value);
      }
      break;

    case RPC_CONTENT:
      if (value == null) {
        unsetRpcContent();
      } else {
        setRpcContent((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TRACE_ID:
      return getTraceId();

    case TIMESTAMP:
      return getTimestamp();

    case AGENT_ID:
      return getAgentId();

    case INVOKE_ID:
      return getInvokeId();

    case INVOKE_TYPE:
      return getInvokeType();

    case PRESSURE_TEST:
      return isPressureTest();

    case ENTRANCE:
      return isEntrance();

    case SERVER:
      return isServer();

    case APP_NAME:
      return getAppName();

    case MIDDLEWARE_NAME:
      return getMiddlewareName();

    case SERVICE_NAME:
      return getServiceName();

    case METHOD_NAME:
      return getMethodName();

    case REQUEST:
      return getRequest();

    case RESPONSE:
      return getResponse();

    case CALLBACK_MSG:
      return getCallbackMsg();

    case REQUEST_SIZE:
      return getRequestSize();

    case RESPONSE_SIZE:
      return getResponseSize();

    case EXT:
      return getExt();

    case RPC_CONTENT:
      return getRpcContent();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TRACE_ID:
      return isSetTraceId();
    case TIMESTAMP:
      return isSetTimestamp();
    case AGENT_ID:
      return isSetAgentId();
    case INVOKE_ID:
      return isSetInvokeId();
    case INVOKE_TYPE:
      return isSetInvokeType();
    case PRESSURE_TEST:
      return isSetPressureTest();
    case ENTRANCE:
      return isSetEntrance();
    case SERVER:
      return isSetServer();
    case APP_NAME:
      return isSetAppName();
    case MIDDLEWARE_NAME:
      return isSetMiddlewareName();
    case SERVICE_NAME:
      return isSetServiceName();
    case METHOD_NAME:
      return isSetMethodName();
    case REQUEST:
      return isSetRequest();
    case RESPONSE:
      return isSetResponse();
    case CALLBACK_MSG:
      return isSetCallbackMsg();
    case REQUEST_SIZE:
      return isSetRequestSize();
    case RESPONSE_SIZE:
      return isSetResponseSize();
    case EXT:
      return isSetExt();
    case RPC_CONTENT:
      return isSetRpcContent();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TStressTestTracePayloadData)
      return this.equals((TStressTestTracePayloadData)that);
    return false;
  }

  public boolean equals(TStressTestTracePayloadData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_traceId = true && this.isSetTraceId();
    boolean that_present_traceId = true && that.isSetTraceId();
    if (this_present_traceId || that_present_traceId) {
      if (!(this_present_traceId && that_present_traceId))
        return false;
      if (!this.traceId.equals(that.traceId))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_agentId = true && this.isSetAgentId();
    boolean that_present_agentId = true && that.isSetAgentId();
    if (this_present_agentId || that_present_agentId) {
      if (!(this_present_agentId && that_present_agentId))
        return false;
      if (!this.agentId.equals(that.agentId))
        return false;
    }

    boolean this_present_invokeId = true && this.isSetInvokeId();
    boolean that_present_invokeId = true && that.isSetInvokeId();
    if (this_present_invokeId || that_present_invokeId) {
      if (!(this_present_invokeId && that_present_invokeId))
        return false;
      if (!this.invokeId.equals(that.invokeId))
        return false;
    }

    boolean this_present_invokeType = true;
    boolean that_present_invokeType = true;
    if (this_present_invokeType || that_present_invokeType) {
      if (!(this_present_invokeType && that_present_invokeType))
        return false;
      if (this.invokeType != that.invokeType)
        return false;
    }

    boolean this_present_pressureTest = true;
    boolean that_present_pressureTest = true;
    if (this_present_pressureTest || that_present_pressureTest) {
      if (!(this_present_pressureTest && that_present_pressureTest))
        return false;
      if (this.pressureTest != that.pressureTest)
        return false;
    }

    boolean this_present_entrance = true;
    boolean that_present_entrance = true;
    if (this_present_entrance || that_present_entrance) {
      if (!(this_present_entrance && that_present_entrance))
        return false;
      if (this.entrance != that.entrance)
        return false;
    }

    boolean this_present_server = true;
    boolean that_present_server = true;
    if (this_present_server || that_present_server) {
      if (!(this_present_server && that_present_server))
        return false;
      if (this.server != that.server)
        return false;
    }

    boolean this_present_appName = true && this.isSetAppName();
    boolean that_present_appName = true && that.isSetAppName();
    if (this_present_appName || that_present_appName) {
      if (!(this_present_appName && that_present_appName))
        return false;
      if (!this.appName.equals(that.appName))
        return false;
    }

    boolean this_present_middlewareName = true && this.isSetMiddlewareName();
    boolean that_present_middlewareName = true && that.isSetMiddlewareName();
    if (this_present_middlewareName || that_present_middlewareName) {
      if (!(this_present_middlewareName && that_present_middlewareName))
        return false;
      if (!this.middlewareName.equals(that.middlewareName))
        return false;
    }

    boolean this_present_serviceName = true && this.isSetServiceName();
    boolean that_present_serviceName = true && that.isSetServiceName();
    if (this_present_serviceName || that_present_serviceName) {
      if (!(this_present_serviceName && that_present_serviceName))
        return false;
      if (!this.serviceName.equals(that.serviceName))
        return false;
    }

    boolean this_present_methodName = true && this.isSetMethodName();
    boolean that_present_methodName = true && that.isSetMethodName();
    if (this_present_methodName || that_present_methodName) {
      if (!(this_present_methodName && that_present_methodName))
        return false;
      if (!this.methodName.equals(that.methodName))
        return false;
    }

    boolean this_present_request = true && this.isSetRequest();
    boolean that_present_request = true && that.isSetRequest();
    if (this_present_request || that_present_request) {
      if (!(this_present_request && that_present_request))
        return false;
      if (!this.request.equals(that.request))
        return false;
    }

    boolean this_present_response = true && this.isSetResponse();
    boolean that_present_response = true && that.isSetResponse();
    if (this_present_response || that_present_response) {
      if (!(this_present_response && that_present_response))
        return false;
      if (!this.response.equals(that.response))
        return false;
    }

    boolean this_present_callbackMsg = true && this.isSetCallbackMsg();
    boolean that_present_callbackMsg = true && that.isSetCallbackMsg();
    if (this_present_callbackMsg || that_present_callbackMsg) {
      if (!(this_present_callbackMsg && that_present_callbackMsg))
        return false;
      if (!this.callbackMsg.equals(that.callbackMsg))
        return false;
    }

    boolean this_present_requestSize = true && this.isSetRequestSize();
    boolean that_present_requestSize = true && that.isSetRequestSize();
    if (this_present_requestSize || that_present_requestSize) {
      if (!(this_present_requestSize && that_present_requestSize))
        return false;
      if (this.requestSize != that.requestSize)
        return false;
    }

    boolean this_present_responseSize = true && this.isSetResponseSize();
    boolean that_present_responseSize = true && that.isSetResponseSize();
    if (this_present_responseSize || that_present_responseSize) {
      if (!(this_present_responseSize && that_present_responseSize))
        return false;
      if (this.responseSize != that.responseSize)
        return false;
    }

    boolean this_present_ext = true && this.isSetExt();
    boolean that_present_ext = true && that.isSetExt();
    if (this_present_ext || that_present_ext) {
      if (!(this_present_ext && that_present_ext))
        return false;
      if (!this.ext.equals(that.ext))
        return false;
    }

    boolean this_present_rpcContent = true && this.isSetRpcContent();
    boolean that_present_rpcContent = true && that.isSetRpcContent();
    if (this_present_rpcContent || that_present_rpcContent) {
      if (!(this_present_rpcContent && that_present_rpcContent))
        return false;
      if (!this.rpcContent.equals(that.rpcContent))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTraceId()) ? 131071 : 524287);
    if (isSetTraceId())
      hashCode = hashCode * 8191 + traceId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((isSetAgentId()) ? 131071 : 524287);
    if (isSetAgentId())
      hashCode = hashCode * 8191 + agentId.hashCode();

    hashCode = hashCode * 8191 + ((isSetInvokeId()) ? 131071 : 524287);
    if (isSetInvokeId())
      hashCode = hashCode * 8191 + invokeId.hashCode();

    hashCode = hashCode * 8191 + (int) (invokeType);

    hashCode = hashCode * 8191 + ((pressureTest) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((entrance) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((server) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetAppName()) ? 131071 : 524287);
    if (isSetAppName())
      hashCode = hashCode * 8191 + appName.hashCode();

    hashCode = hashCode * 8191 + ((isSetMiddlewareName()) ? 131071 : 524287);
    if (isSetMiddlewareName())
      hashCode = hashCode * 8191 + middlewareName.hashCode();

    hashCode = hashCode * 8191 + ((isSetServiceName()) ? 131071 : 524287);
    if (isSetServiceName())
      hashCode = hashCode * 8191 + serviceName.hashCode();

    hashCode = hashCode * 8191 + ((isSetMethodName()) ? 131071 : 524287);
    if (isSetMethodName())
      hashCode = hashCode * 8191 + methodName.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
    if (isSetRequest())
      hashCode = hashCode * 8191 + request.hashCode();

    hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
    if (isSetResponse())
      hashCode = hashCode * 8191 + response.hashCode();

    hashCode = hashCode * 8191 + ((isSetCallbackMsg()) ? 131071 : 524287);
    if (isSetCallbackMsg())
      hashCode = hashCode * 8191 + callbackMsg.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequestSize()) ? 131071 : 524287);
    if (isSetRequestSize())
      hashCode = hashCode * 8191 + requestSize;

    hashCode = hashCode * 8191 + ((isSetResponseSize()) ? 131071 : 524287);
    if (isSetResponseSize())
      hashCode = hashCode * 8191 + responseSize;

    hashCode = hashCode * 8191 + ((isSetExt()) ? 131071 : 524287);
    if (isSetExt())
      hashCode = hashCode * 8191 + ext.hashCode();

    hashCode = hashCode * 8191 + ((isSetRpcContent()) ? 131071 : 524287);
    if (isSetRpcContent())
      hashCode = hashCode * 8191 + rpcContent.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TStressTestTracePayloadData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTraceId()).compareTo(other.isSetTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceId, other.traceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAgentId()).compareTo(other.isSetAgentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentId, other.agentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInvokeId()).compareTo(other.isSetInvokeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvokeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invokeId, other.invokeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInvokeType()).compareTo(other.isSetInvokeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvokeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invokeType, other.invokeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPressureTest()).compareTo(other.isSetPressureTest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPressureTest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pressureTest, other.pressureTest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEntrance()).compareTo(other.isSetEntrance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntrance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entrance, other.entrance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetServer()).compareTo(other.isSetServer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server, other.server);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMiddlewareName()).compareTo(other.isSetMiddlewareName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMiddlewareName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.middlewareName, other.middlewareName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetServiceName()).compareTo(other.isSetServiceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, other.serviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMethodName()).compareTo(other.isSetMethodName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethodName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.methodName, other.methodName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResponse()).compareTo(other.isSetResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCallbackMsg()).compareTo(other.isSetCallbackMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallbackMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callbackMsg, other.callbackMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequestSize()).compareTo(other.isSetRequestSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestSize, other.requestSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResponseSize()).compareTo(other.isSetResponseSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseSize, other.responseSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRpcContent()).compareTo(other.isSetRpcContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpcContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpcContent, other.rpcContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TStressTestTracePayloadData(");
    boolean first = true;

    sb.append("traceId:");
    if (this.traceId == null) {
      sb.append("null");
    } else {
      sb.append(this.traceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("agentId:");
    if (this.agentId == null) {
      sb.append("null");
    } else {
      sb.append(this.agentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("invokeId:");
    if (this.invokeId == null) {
      sb.append("null");
    } else {
      sb.append(this.invokeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("invokeType:");
    sb.append(this.invokeType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pressureTest:");
    sb.append(this.pressureTest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("entrance:");
    sb.append(this.entrance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("server:");
    sb.append(this.server);
    first = false;
    if (isSetAppName()) {
      if (!first) sb.append(", ");
      sb.append("appName:");
      if (this.appName == null) {
        sb.append("null");
      } else {
        sb.append(this.appName);
      }
      first = false;
    }
    if (isSetMiddlewareName()) {
      if (!first) sb.append(", ");
      sb.append("middlewareName:");
      if (this.middlewareName == null) {
        sb.append("null");
      } else {
        sb.append(this.middlewareName);
      }
      first = false;
    }
    if (isSetServiceName()) {
      if (!first) sb.append(", ");
      sb.append("serviceName:");
      if (this.serviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceName);
      }
      first = false;
    }
    if (isSetMethodName()) {
      if (!first) sb.append(", ");
      sb.append("methodName:");
      if (this.methodName == null) {
        sb.append("null");
      } else {
        sb.append(this.methodName);
      }
      first = false;
    }
    if (isSetRequest()) {
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
    }
    if (isSetResponse()) {
      if (!first) sb.append(", ");
      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
    }
    if (isSetCallbackMsg()) {
      if (!first) sb.append(", ");
      sb.append("callbackMsg:");
      if (this.callbackMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.callbackMsg);
      }
      first = false;
    }
    if (isSetRequestSize()) {
      if (!first) sb.append(", ");
      sb.append("requestSize:");
      sb.append(this.requestSize);
      first = false;
    }
    if (isSetResponseSize()) {
      if (!first) sb.append(", ");
      sb.append("responseSize:");
      sb.append(this.responseSize);
      first = false;
    }
    if (isSetExt()) {
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
    }
    if (isSetRpcContent()) {
      if (!first) sb.append(", ");
      sb.append("rpcContent:");
      if (this.rpcContent == null) {
        sb.append("null");
      } else {
        sb.append(this.rpcContent);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TStressTestTracePayloadDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TStressTestTracePayloadDataStandardScheme getScheme() {
      return new TStressTestTracePayloadDataStandardScheme();
    }
  }

  private static class TStressTestTracePayloadDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<TStressTestTracePayloadData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TStressTestTracePayloadData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traceId = iprot.readString();
              struct.setTraceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AGENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agentId = iprot.readString();
              struct.setAgentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INVOKE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.invokeId = iprot.readString();
              struct.setInvokeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INVOKE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.invokeType = iprot.readByte();
              struct.setInvokeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRESSURE_TEST
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.pressureTest = iprot.readBool();
              struct.setPressureTestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENTRANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.entrance = iprot.readBool();
              struct.setEntranceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SERVER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.server = iprot.readBool();
              struct.setServerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // APP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appName = iprot.readString();
              struct.setAppNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MIDDLEWARE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.middlewareName = iprot.readString();
              struct.setMiddlewareNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SERVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceName = iprot.readString();
              struct.setServiceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // METHOD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.methodName = iprot.readString();
              struct.setMethodNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.request = iprot.readString();
              struct.setRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.response = iprot.readString();
              struct.setResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CALLBACK_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.callbackMsg = iprot.readString();
              struct.setCallbackMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REQUEST_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestSize = iprot.readI32();
              struct.setRequestSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RESPONSE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.responseSize = iprot.readI32();
              struct.setResponseSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ext = iprot.readString();
              struct.setExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // RPC_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rpcContent = iprot.readString();
              struct.setRpcContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TStressTestTracePayloadData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.traceId != null) {
        oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
        oprot.writeString(struct.traceId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.agentId != null) {
        oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
        oprot.writeString(struct.agentId);
        oprot.writeFieldEnd();
      }
      if (struct.invokeId != null) {
        oprot.writeFieldBegin(INVOKE_ID_FIELD_DESC);
        oprot.writeString(struct.invokeId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INVOKE_TYPE_FIELD_DESC);
      oprot.writeByte(struct.invokeType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRESSURE_TEST_FIELD_DESC);
      oprot.writeBool(struct.pressureTest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENTRANCE_FIELD_DESC);
      oprot.writeBool(struct.entrance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVER_FIELD_DESC);
      oprot.writeBool(struct.server);
      oprot.writeFieldEnd();
      if (struct.appName != null) {
        if (struct.isSetAppName()) {
          oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
          oprot.writeString(struct.appName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.middlewareName != null) {
        if (struct.isSetMiddlewareName()) {
          oprot.writeFieldBegin(MIDDLEWARE_NAME_FIELD_DESC);
          oprot.writeString(struct.middlewareName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.serviceName != null) {
        if (struct.isSetServiceName()) {
          oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.serviceName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.methodName != null) {
        if (struct.isSetMethodName()) {
          oprot.writeFieldBegin(METHOD_NAME_FIELD_DESC);
          oprot.writeString(struct.methodName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.request != null) {
        if (struct.isSetRequest()) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          oprot.writeString(struct.request);
          oprot.writeFieldEnd();
        }
      }
      if (struct.response != null) {
        if (struct.isSetResponse()) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          oprot.writeString(struct.response);
          oprot.writeFieldEnd();
        }
      }
      if (struct.callbackMsg != null) {
        if (struct.isSetCallbackMsg()) {
          oprot.writeFieldBegin(CALLBACK_MSG_FIELD_DESC);
          oprot.writeString(struct.callbackMsg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRequestSize()) {
        oprot.writeFieldBegin(REQUEST_SIZE_FIELD_DESC);
        oprot.writeI32(struct.requestSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetResponseSize()) {
        oprot.writeFieldBegin(RESPONSE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.responseSize);
        oprot.writeFieldEnd();
      }
      if (struct.ext != null) {
        if (struct.isSetExt()) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rpcContent != null) {
        if (struct.isSetRpcContent()) {
          oprot.writeFieldBegin(RPC_CONTENT_FIELD_DESC);
          oprot.writeString(struct.rpcContent);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TStressTestTracePayloadDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TStressTestTracePayloadDataTupleScheme getScheme() {
      return new TStressTestTracePayloadDataTupleScheme();
    }
  }

  private static class TStressTestTracePayloadDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<TStressTestTracePayloadData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TStressTestTracePayloadData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTraceId()) {
        optionals.set(0);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(1);
      }
      if (struct.isSetAgentId()) {
        optionals.set(2);
      }
      if (struct.isSetInvokeId()) {
        optionals.set(3);
      }
      if (struct.isSetInvokeType()) {
        optionals.set(4);
      }
      if (struct.isSetPressureTest()) {
        optionals.set(5);
      }
      if (struct.isSetEntrance()) {
        optionals.set(6);
      }
      if (struct.isSetServer()) {
        optionals.set(7);
      }
      if (struct.isSetAppName()) {
        optionals.set(8);
      }
      if (struct.isSetMiddlewareName()) {
        optionals.set(9);
      }
      if (struct.isSetServiceName()) {
        optionals.set(10);
      }
      if (struct.isSetMethodName()) {
        optionals.set(11);
      }
      if (struct.isSetRequest()) {
        optionals.set(12);
      }
      if (struct.isSetResponse()) {
        optionals.set(13);
      }
      if (struct.isSetCallbackMsg()) {
        optionals.set(14);
      }
      if (struct.isSetRequestSize()) {
        optionals.set(15);
      }
      if (struct.isSetResponseSize()) {
        optionals.set(16);
      }
      if (struct.isSetExt()) {
        optionals.set(17);
      }
      if (struct.isSetRpcContent()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetTraceId()) {
        oprot.writeString(struct.traceId);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetAgentId()) {
        oprot.writeString(struct.agentId);
      }
      if (struct.isSetInvokeId()) {
        oprot.writeString(struct.invokeId);
      }
      if (struct.isSetInvokeType()) {
        oprot.writeByte(struct.invokeType);
      }
      if (struct.isSetPressureTest()) {
        oprot.writeBool(struct.pressureTest);
      }
      if (struct.isSetEntrance()) {
        oprot.writeBool(struct.entrance);
      }
      if (struct.isSetServer()) {
        oprot.writeBool(struct.server);
      }
      if (struct.isSetAppName()) {
        oprot.writeString(struct.appName);
      }
      if (struct.isSetMiddlewareName()) {
        oprot.writeString(struct.middlewareName);
      }
      if (struct.isSetServiceName()) {
        oprot.writeString(struct.serviceName);
      }
      if (struct.isSetMethodName()) {
        oprot.writeString(struct.methodName);
      }
      if (struct.isSetRequest()) {
        oprot.writeString(struct.request);
      }
      if (struct.isSetResponse()) {
        oprot.writeString(struct.response);
      }
      if (struct.isSetCallbackMsg()) {
        oprot.writeString(struct.callbackMsg);
      }
      if (struct.isSetRequestSize()) {
        oprot.writeI32(struct.requestSize);
      }
      if (struct.isSetResponseSize()) {
        oprot.writeI32(struct.responseSize);
      }
      if (struct.isSetExt()) {
        oprot.writeString(struct.ext);
      }
      if (struct.isSetRpcContent()) {
        oprot.writeString(struct.rpcContent);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TStressTestTracePayloadData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.traceId = iprot.readString();
        struct.setTraceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.agentId = iprot.readString();
        struct.setAgentIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.invokeId = iprot.readString();
        struct.setInvokeIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.invokeType = iprot.readByte();
        struct.setInvokeTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pressureTest = iprot.readBool();
        struct.setPressureTestIsSet(true);
      }
      if (incoming.get(6)) {
        struct.entrance = iprot.readBool();
        struct.setEntranceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.server = iprot.readBool();
        struct.setServerIsSet(true);
      }
      if (incoming.get(8)) {
        struct.appName = iprot.readString();
        struct.setAppNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.middlewareName = iprot.readString();
        struct.setMiddlewareNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.serviceName = iprot.readString();
        struct.setServiceNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.methodName = iprot.readString();
        struct.setMethodNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.request = iprot.readString();
        struct.setRequestIsSet(true);
      }
      if (incoming.get(13)) {
        struct.response = iprot.readString();
        struct.setResponseIsSet(true);
      }
      if (incoming.get(14)) {
        struct.callbackMsg = iprot.readString();
        struct.setCallbackMsgIsSet(true);
      }
      if (incoming.get(15)) {
        struct.requestSize = iprot.readI32();
        struct.setRequestSizeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.responseSize = iprot.readI32();
        struct.setResponseSizeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.ext = iprot.readString();
        struct.setExtIsSet(true);
      }
      if (incoming.get(18)) {
        struct.rpcContent = iprot.readString();
        struct.setRpcContentIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

