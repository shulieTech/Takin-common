/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.shulie.takin.pinpoint.thrift.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2023-06-15")
public class TStressTestTraceData implements org.apache.thrift.TBase<TStressTestTraceData, TStressTestTraceData._Fields>, java.io.Serializable, Cloneable, Comparable<TStressTestTraceData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TStressTestTraceData");

  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField AGENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("agentId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INVOKE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("invokeId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INVOKE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("invokeType", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField COST_FIELD_DESC = new org.apache.thrift.protocol.TField("cost", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MIDDLEWARE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("middlewareName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField METHOD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("methodName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField RESULT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultCode", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PRESSURE_TEST_FIELD_DESC = new org.apache.thrift.protocol.TField("pressureTest", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField DEBUG_TEST_FIELD_DESC = new org.apache.thrift.protocol.TField("debugTest", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField ENTRANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("entrance", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField SERVER_FIELD_DESC = new org.apache.thrift.protocol.TField("server", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField ENTRANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entranceId", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField UP_APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("upAppName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField REMOTE_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteIp", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)19);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TStressTestTraceDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TStressTestTraceDataTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.lang.String traceId; // required
  private long timestamp; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String agentId; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String invokeId; // required
  private byte invokeType; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String appName; // required
  private int cost; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String middlewareName; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String serviceName; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String methodName; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String resultCode; // required
  private boolean pressureTest; // required
  private boolean debugTest; // required
  private boolean entrance; // required
  private boolean server; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String entranceId; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String upAppName; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String remoteIp; // optional
  private int port; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRACE_ID((short)1, "traceId"),
    TIMESTAMP((short)2, "timestamp"),
    AGENT_ID((short)3, "agentId"),
    INVOKE_ID((short)4, "invokeId"),
    INVOKE_TYPE((short)5, "invokeType"),
    APP_NAME((short)6, "appName"),
    COST((short)7, "cost"),
    MIDDLEWARE_NAME((short)8, "middlewareName"),
    SERVICE_NAME((short)9, "serviceName"),
    METHOD_NAME((short)10, "methodName"),
    RESULT_CODE((short)11, "resultCode"),
    PRESSURE_TEST((short)12, "pressureTest"),
    DEBUG_TEST((short)13, "debugTest"),
    ENTRANCE((short)14, "entrance"),
    SERVER((short)15, "server"),
    ENTRANCE_ID((short)16, "entranceId"),
    UP_APP_NAME((short)17, "upAppName"),
    REMOTE_IP((short)18, "remoteIp"),
    PORT((short)19, "port");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRACE_ID
          return TRACE_ID;
        case 2: // TIMESTAMP
          return TIMESTAMP;
        case 3: // AGENT_ID
          return AGENT_ID;
        case 4: // INVOKE_ID
          return INVOKE_ID;
        case 5: // INVOKE_TYPE
          return INVOKE_TYPE;
        case 6: // APP_NAME
          return APP_NAME;
        case 7: // COST
          return COST;
        case 8: // MIDDLEWARE_NAME
          return MIDDLEWARE_NAME;
        case 9: // SERVICE_NAME
          return SERVICE_NAME;
        case 10: // METHOD_NAME
          return METHOD_NAME;
        case 11: // RESULT_CODE
          return RESULT_CODE;
        case 12: // PRESSURE_TEST
          return PRESSURE_TEST;
        case 13: // DEBUG_TEST
          return DEBUG_TEST;
        case 14: // ENTRANCE
          return ENTRANCE;
        case 15: // SERVER
          return SERVER;
        case 16: // ENTRANCE_ID
          return ENTRANCE_ID;
        case 17: // UP_APP_NAME
          return UP_APP_NAME;
        case 18: // REMOTE_IP
          return REMOTE_IP;
        case 19: // PORT
          return PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __INVOKETYPE_ISSET_ID = 1;
  private static final int __COST_ISSET_ID = 2;
  private static final int __PRESSURETEST_ISSET_ID = 3;
  private static final int __DEBUGTEST_ISSET_ID = 4;
  private static final int __ENTRANCE_ISSET_ID = 5;
  private static final int __SERVER_ISSET_ID = 6;
  private static final int __PORT_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.UP_APP_NAME,_Fields.REMOTE_IP,_Fields.PORT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("traceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AGENT_ID, new org.apache.thrift.meta_data.FieldMetaData("agentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVOKE_ID, new org.apache.thrift.meta_data.FieldMetaData("invokeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVOKE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("invokeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COST, new org.apache.thrift.meta_data.FieldMetaData("cost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIDDLEWARE_NAME, new org.apache.thrift.meta_data.FieldMetaData("middlewareName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METHOD_NAME, new org.apache.thrift.meta_data.FieldMetaData("methodName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_CODE, new org.apache.thrift.meta_data.FieldMetaData("resultCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRESSURE_TEST, new org.apache.thrift.meta_data.FieldMetaData("pressureTest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEBUG_TEST, new org.apache.thrift.meta_data.FieldMetaData("debugTest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENTRANCE, new org.apache.thrift.meta_data.FieldMetaData("entrance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SERVER, new org.apache.thrift.meta_data.FieldMetaData("server", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENTRANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("entranceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UP_APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("upAppName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMOTE_IP, new org.apache.thrift.meta_data.FieldMetaData("remoteIp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStressTestTraceData.class, metaDataMap);
  }

  public TStressTestTraceData() {
  }

  public TStressTestTraceData(
    java.lang.String traceId,
    long timestamp,
    java.lang.String agentId,
    java.lang.String invokeId,
    byte invokeType,
    java.lang.String appName,
    int cost,
    java.lang.String middlewareName,
    java.lang.String serviceName,
    java.lang.String methodName,
    java.lang.String resultCode,
    boolean pressureTest,
    boolean debugTest,
    boolean entrance,
    boolean server,
    java.lang.String entranceId)
  {
    this();
    this.traceId = traceId;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.agentId = agentId;
    this.invokeId = invokeId;
    this.invokeType = invokeType;
    setInvokeTypeIsSet(true);
    this.appName = appName;
    this.cost = cost;
    setCostIsSet(true);
    this.middlewareName = middlewareName;
    this.serviceName = serviceName;
    this.methodName = methodName;
    this.resultCode = resultCode;
    this.pressureTest = pressureTest;
    setPressureTestIsSet(true);
    this.debugTest = debugTest;
    setDebugTestIsSet(true);
    this.entrance = entrance;
    setEntranceIsSet(true);
    this.server = server;
    setServerIsSet(true);
    this.entranceId = entranceId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TStressTestTraceData(TStressTestTraceData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTraceId()) {
      this.traceId = other.traceId;
    }
    this.timestamp = other.timestamp;
    if (other.isSetAgentId()) {
      this.agentId = other.agentId;
    }
    if (other.isSetInvokeId()) {
      this.invokeId = other.invokeId;
    }
    this.invokeType = other.invokeType;
    if (other.isSetAppName()) {
      this.appName = other.appName;
    }
    this.cost = other.cost;
    if (other.isSetMiddlewareName()) {
      this.middlewareName = other.middlewareName;
    }
    if (other.isSetServiceName()) {
      this.serviceName = other.serviceName;
    }
    if (other.isSetMethodName()) {
      this.methodName = other.methodName;
    }
    if (other.isSetResultCode()) {
      this.resultCode = other.resultCode;
    }
    this.pressureTest = other.pressureTest;
    this.debugTest = other.debugTest;
    this.entrance = other.entrance;
    this.server = other.server;
    if (other.isSetEntranceId()) {
      this.entranceId = other.entranceId;
    }
    if (other.isSetUpAppName()) {
      this.upAppName = other.upAppName;
    }
    if (other.isSetRemoteIp()) {
      this.remoteIp = other.remoteIp;
    }
    this.port = other.port;
  }

  public TStressTestTraceData deepCopy() {
    return new TStressTestTraceData(this);
  }

  @Override
  public void clear() {
    this.traceId = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.agentId = null;
    this.invokeId = null;
    setInvokeTypeIsSet(false);
    this.invokeType = 0;
    this.appName = null;
    setCostIsSet(false);
    this.cost = 0;
    this.middlewareName = null;
    this.serviceName = null;
    this.methodName = null;
    this.resultCode = null;
    setPressureTestIsSet(false);
    this.pressureTest = false;
    setDebugTestIsSet(false);
    this.debugTest = false;
    setEntranceIsSet(false);
    this.entrance = false;
    setServerIsSet(false);
    this.server = false;
    this.entranceId = null;
    this.upAppName = null;
    this.remoteIp = null;
    setPortIsSet(false);
    this.port = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTraceId() {
    return this.traceId;
  }

  public void setTraceId(@org.apache.thrift.annotation.Nullable java.lang.String traceId) {
    this.traceId = traceId;
  }

  public void unsetTraceId() {
    this.traceId = null;
  }

  /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceId() {
    return this.traceId != null;
  }

  public void setTraceIdIsSet(boolean value) {
    if (!value) {
      this.traceId = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public void setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAgentId() {
    return this.agentId;
  }

  public void setAgentId(@org.apache.thrift.annotation.Nullable java.lang.String agentId) {
    this.agentId = agentId;
  }

  public void unsetAgentId() {
    this.agentId = null;
  }

  /** Returns true if field agentId is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentId() {
    return this.agentId != null;
  }

  public void setAgentIdIsSet(boolean value) {
    if (!value) {
      this.agentId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getInvokeId() {
    return this.invokeId;
  }

  public void setInvokeId(@org.apache.thrift.annotation.Nullable java.lang.String invokeId) {
    this.invokeId = invokeId;
  }

  public void unsetInvokeId() {
    this.invokeId = null;
  }

  /** Returns true if field invokeId is set (has been assigned a value) and false otherwise */
  public boolean isSetInvokeId() {
    return this.invokeId != null;
  }

  public void setInvokeIdIsSet(boolean value) {
    if (!value) {
      this.invokeId = null;
    }
  }

  public byte getInvokeType() {
    return this.invokeType;
  }

  public void setInvokeType(byte invokeType) {
    this.invokeType = invokeType;
    setInvokeTypeIsSet(true);
  }

  public void unsetInvokeType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INVOKETYPE_ISSET_ID);
  }

  /** Returns true if field invokeType is set (has been assigned a value) and false otherwise */
  public boolean isSetInvokeType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INVOKETYPE_ISSET_ID);
  }

  public void setInvokeTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INVOKETYPE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAppName() {
    return this.appName;
  }

  public void setAppName(@org.apache.thrift.annotation.Nullable java.lang.String appName) {
    this.appName = appName;
  }

  public void unsetAppName() {
    this.appName = null;
  }

  /** Returns true if field appName is set (has been assigned a value) and false otherwise */
  public boolean isSetAppName() {
    return this.appName != null;
  }

  public void setAppNameIsSet(boolean value) {
    if (!value) {
      this.appName = null;
    }
  }

  public int getCost() {
    return this.cost;
  }

  public void setCost(int cost) {
    this.cost = cost;
    setCostIsSet(true);
  }

  public void unsetCost() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COST_ISSET_ID);
  }

  /** Returns true if field cost is set (has been assigned a value) and false otherwise */
  public boolean isSetCost() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COST_ISSET_ID);
  }

  public void setCostIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COST_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMiddlewareName() {
    return this.middlewareName;
  }

  public void setMiddlewareName(@org.apache.thrift.annotation.Nullable java.lang.String middlewareName) {
    this.middlewareName = middlewareName;
  }

  public void unsetMiddlewareName() {
    this.middlewareName = null;
  }

  /** Returns true if field middlewareName is set (has been assigned a value) and false otherwise */
  public boolean isSetMiddlewareName() {
    return this.middlewareName != null;
  }

  public void setMiddlewareNameIsSet(boolean value) {
    if (!value) {
      this.middlewareName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getServiceName() {
    return this.serviceName;
  }

  public void setServiceName(@org.apache.thrift.annotation.Nullable java.lang.String serviceName) {
    this.serviceName = serviceName;
  }

  public void unsetServiceName() {
    this.serviceName = null;
  }

  /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceName() {
    return this.serviceName != null;
  }

  public void setServiceNameIsSet(boolean value) {
    if (!value) {
      this.serviceName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMethodName() {
    return this.methodName;
  }

  public void setMethodName(@org.apache.thrift.annotation.Nullable java.lang.String methodName) {
    this.methodName = methodName;
  }

  public void unsetMethodName() {
    this.methodName = null;
  }

  /** Returns true if field methodName is set (has been assigned a value) and false otherwise */
  public boolean isSetMethodName() {
    return this.methodName != null;
  }

  public void setMethodNameIsSet(boolean value) {
    if (!value) {
      this.methodName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getResultCode() {
    return this.resultCode;
  }

  public void setResultCode(@org.apache.thrift.annotation.Nullable java.lang.String resultCode) {
    this.resultCode = resultCode;
  }

  public void unsetResultCode() {
    this.resultCode = null;
  }

  /** Returns true if field resultCode is set (has been assigned a value) and false otherwise */
  public boolean isSetResultCode() {
    return this.resultCode != null;
  }

  public void setResultCodeIsSet(boolean value) {
    if (!value) {
      this.resultCode = null;
    }
  }

  public boolean isPressureTest() {
    return this.pressureTest;
  }

  public void setPressureTest(boolean pressureTest) {
    this.pressureTest = pressureTest;
    setPressureTestIsSet(true);
  }

  public void unsetPressureTest() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRESSURETEST_ISSET_ID);
  }

  /** Returns true if field pressureTest is set (has been assigned a value) and false otherwise */
  public boolean isSetPressureTest() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRESSURETEST_ISSET_ID);
  }

  public void setPressureTestIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRESSURETEST_ISSET_ID, value);
  }

  public boolean isDebugTest() {
    return this.debugTest;
  }

  public void setDebugTest(boolean debugTest) {
    this.debugTest = debugTest;
    setDebugTestIsSet(true);
  }

  public void unsetDebugTest() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEBUGTEST_ISSET_ID);
  }

  /** Returns true if field debugTest is set (has been assigned a value) and false otherwise */
  public boolean isSetDebugTest() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEBUGTEST_ISSET_ID);
  }

  public void setDebugTestIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEBUGTEST_ISSET_ID, value);
  }

  public boolean isEntrance() {
    return this.entrance;
  }

  public void setEntrance(boolean entrance) {
    this.entrance = entrance;
    setEntranceIsSet(true);
  }

  public void unsetEntrance() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENTRANCE_ISSET_ID);
  }

  /** Returns true if field entrance is set (has been assigned a value) and false otherwise */
  public boolean isSetEntrance() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENTRANCE_ISSET_ID);
  }

  public void setEntranceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENTRANCE_ISSET_ID, value);
  }

  public boolean isServer() {
    return this.server;
  }

  public void setServer(boolean server) {
    this.server = server;
    setServerIsSet(true);
  }

  public void unsetServer() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVER_ISSET_ID);
  }

  /** Returns true if field server is set (has been assigned a value) and false otherwise */
  public boolean isSetServer() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVER_ISSET_ID);
  }

  public void setServerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVER_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEntranceId() {
    return this.entranceId;
  }

  public void setEntranceId(@org.apache.thrift.annotation.Nullable java.lang.String entranceId) {
    this.entranceId = entranceId;
  }

  public void unsetEntranceId() {
    this.entranceId = null;
  }

  /** Returns true if field entranceId is set (has been assigned a value) and false otherwise */
  public boolean isSetEntranceId() {
    return this.entranceId != null;
  }

  public void setEntranceIdIsSet(boolean value) {
    if (!value) {
      this.entranceId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUpAppName() {
    return this.upAppName;
  }

  public void setUpAppName(@org.apache.thrift.annotation.Nullable java.lang.String upAppName) {
    this.upAppName = upAppName;
  }

  public void unsetUpAppName() {
    this.upAppName = null;
  }

  /** Returns true if field upAppName is set (has been assigned a value) and false otherwise */
  public boolean isSetUpAppName() {
    return this.upAppName != null;
  }

  public void setUpAppNameIsSet(boolean value) {
    if (!value) {
      this.upAppName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRemoteIp() {
    return this.remoteIp;
  }

  public void setRemoteIp(@org.apache.thrift.annotation.Nullable java.lang.String remoteIp) {
    this.remoteIp = remoteIp;
  }

  public void unsetRemoteIp() {
    this.remoteIp = null;
  }

  /** Returns true if field remoteIp is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoteIp() {
    return this.remoteIp != null;
  }

  public void setRemoteIpIsSet(boolean value) {
    if (!value) {
      this.remoteIp = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public void setPort(int port) {
    this.port = port;
    setPortIsSet(true);
  }

  public void unsetPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TRACE_ID:
      if (value == null) {
        unsetTraceId();
      } else {
        setTraceId((java.lang.String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case AGENT_ID:
      if (value == null) {
        unsetAgentId();
      } else {
        setAgentId((java.lang.String)value);
      }
      break;

    case INVOKE_ID:
      if (value == null) {
        unsetInvokeId();
      } else {
        setInvokeId((java.lang.String)value);
      }
      break;

    case INVOKE_TYPE:
      if (value == null) {
        unsetInvokeType();
      } else {
        setInvokeType((java.lang.Byte)value);
      }
      break;

    case APP_NAME:
      if (value == null) {
        unsetAppName();
      } else {
        setAppName((java.lang.String)value);
      }
      break;

    case COST:
      if (value == null) {
        unsetCost();
      } else {
        setCost((java.lang.Integer)value);
      }
      break;

    case MIDDLEWARE_NAME:
      if (value == null) {
        unsetMiddlewareName();
      } else {
        setMiddlewareName((java.lang.String)value);
      }
      break;

    case SERVICE_NAME:
      if (value == null) {
        unsetServiceName();
      } else {
        setServiceName((java.lang.String)value);
      }
      break;

    case METHOD_NAME:
      if (value == null) {
        unsetMethodName();
      } else {
        setMethodName((java.lang.String)value);
      }
      break;

    case RESULT_CODE:
      if (value == null) {
        unsetResultCode();
      } else {
        setResultCode((java.lang.String)value);
      }
      break;

    case PRESSURE_TEST:
      if (value == null) {
        unsetPressureTest();
      } else {
        setPressureTest((java.lang.Boolean)value);
      }
      break;

    case DEBUG_TEST:
      if (value == null) {
        unsetDebugTest();
      } else {
        setDebugTest((java.lang.Boolean)value);
      }
      break;

    case ENTRANCE:
      if (value == null) {
        unsetEntrance();
      } else {
        setEntrance((java.lang.Boolean)value);
      }
      break;

    case SERVER:
      if (value == null) {
        unsetServer();
      } else {
        setServer((java.lang.Boolean)value);
      }
      break;

    case ENTRANCE_ID:
      if (value == null) {
        unsetEntranceId();
      } else {
        setEntranceId((java.lang.String)value);
      }
      break;

    case UP_APP_NAME:
      if (value == null) {
        unsetUpAppName();
      } else {
        setUpAppName((java.lang.String)value);
      }
      break;

    case REMOTE_IP:
      if (value == null) {
        unsetRemoteIp();
      } else {
        setRemoteIp((java.lang.String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TRACE_ID:
      return getTraceId();

    case TIMESTAMP:
      return getTimestamp();

    case AGENT_ID:
      return getAgentId();

    case INVOKE_ID:
      return getInvokeId();

    case INVOKE_TYPE:
      return getInvokeType();

    case APP_NAME:
      return getAppName();

    case COST:
      return getCost();

    case MIDDLEWARE_NAME:
      return getMiddlewareName();

    case SERVICE_NAME:
      return getServiceName();

    case METHOD_NAME:
      return getMethodName();

    case RESULT_CODE:
      return getResultCode();

    case PRESSURE_TEST:
      return isPressureTest();

    case DEBUG_TEST:
      return isDebugTest();

    case ENTRANCE:
      return isEntrance();

    case SERVER:
      return isServer();

    case ENTRANCE_ID:
      return getEntranceId();

    case UP_APP_NAME:
      return getUpAppName();

    case REMOTE_IP:
      return getRemoteIp();

    case PORT:
      return getPort();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TRACE_ID:
      return isSetTraceId();
    case TIMESTAMP:
      return isSetTimestamp();
    case AGENT_ID:
      return isSetAgentId();
    case INVOKE_ID:
      return isSetInvokeId();
    case INVOKE_TYPE:
      return isSetInvokeType();
    case APP_NAME:
      return isSetAppName();
    case COST:
      return isSetCost();
    case MIDDLEWARE_NAME:
      return isSetMiddlewareName();
    case SERVICE_NAME:
      return isSetServiceName();
    case METHOD_NAME:
      return isSetMethodName();
    case RESULT_CODE:
      return isSetResultCode();
    case PRESSURE_TEST:
      return isSetPressureTest();
    case DEBUG_TEST:
      return isSetDebugTest();
    case ENTRANCE:
      return isSetEntrance();
    case SERVER:
      return isSetServer();
    case ENTRANCE_ID:
      return isSetEntranceId();
    case UP_APP_NAME:
      return isSetUpAppName();
    case REMOTE_IP:
      return isSetRemoteIp();
    case PORT:
      return isSetPort();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TStressTestTraceData)
      return this.equals((TStressTestTraceData)that);
    return false;
  }

  public boolean equals(TStressTestTraceData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_traceId = true && this.isSetTraceId();
    boolean that_present_traceId = true && that.isSetTraceId();
    if (this_present_traceId || that_present_traceId) {
      if (!(this_present_traceId && that_present_traceId))
        return false;
      if (!this.traceId.equals(that.traceId))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_agentId = true && this.isSetAgentId();
    boolean that_present_agentId = true && that.isSetAgentId();
    if (this_present_agentId || that_present_agentId) {
      if (!(this_present_agentId && that_present_agentId))
        return false;
      if (!this.agentId.equals(that.agentId))
        return false;
    }

    boolean this_present_invokeId = true && this.isSetInvokeId();
    boolean that_present_invokeId = true && that.isSetInvokeId();
    if (this_present_invokeId || that_present_invokeId) {
      if (!(this_present_invokeId && that_present_invokeId))
        return false;
      if (!this.invokeId.equals(that.invokeId))
        return false;
    }

    boolean this_present_invokeType = true;
    boolean that_present_invokeType = true;
    if (this_present_invokeType || that_present_invokeType) {
      if (!(this_present_invokeType && that_present_invokeType))
        return false;
      if (this.invokeType != that.invokeType)
        return false;
    }

    boolean this_present_appName = true && this.isSetAppName();
    boolean that_present_appName = true && that.isSetAppName();
    if (this_present_appName || that_present_appName) {
      if (!(this_present_appName && that_present_appName))
        return false;
      if (!this.appName.equals(that.appName))
        return false;
    }

    boolean this_present_cost = true;
    boolean that_present_cost = true;
    if (this_present_cost || that_present_cost) {
      if (!(this_present_cost && that_present_cost))
        return false;
      if (this.cost != that.cost)
        return false;
    }

    boolean this_present_middlewareName = true && this.isSetMiddlewareName();
    boolean that_present_middlewareName = true && that.isSetMiddlewareName();
    if (this_present_middlewareName || that_present_middlewareName) {
      if (!(this_present_middlewareName && that_present_middlewareName))
        return false;
      if (!this.middlewareName.equals(that.middlewareName))
        return false;
    }

    boolean this_present_serviceName = true && this.isSetServiceName();
    boolean that_present_serviceName = true && that.isSetServiceName();
    if (this_present_serviceName || that_present_serviceName) {
      if (!(this_present_serviceName && that_present_serviceName))
        return false;
      if (!this.serviceName.equals(that.serviceName))
        return false;
    }

    boolean this_present_methodName = true && this.isSetMethodName();
    boolean that_present_methodName = true && that.isSetMethodName();
    if (this_present_methodName || that_present_methodName) {
      if (!(this_present_methodName && that_present_methodName))
        return false;
      if (!this.methodName.equals(that.methodName))
        return false;
    }

    boolean this_present_resultCode = true && this.isSetResultCode();
    boolean that_present_resultCode = true && that.isSetResultCode();
    if (this_present_resultCode || that_present_resultCode) {
      if (!(this_present_resultCode && that_present_resultCode))
        return false;
      if (!this.resultCode.equals(that.resultCode))
        return false;
    }

    boolean this_present_pressureTest = true;
    boolean that_present_pressureTest = true;
    if (this_present_pressureTest || that_present_pressureTest) {
      if (!(this_present_pressureTest && that_present_pressureTest))
        return false;
      if (this.pressureTest != that.pressureTest)
        return false;
    }

    boolean this_present_debugTest = true;
    boolean that_present_debugTest = true;
    if (this_present_debugTest || that_present_debugTest) {
      if (!(this_present_debugTest && that_present_debugTest))
        return false;
      if (this.debugTest != that.debugTest)
        return false;
    }

    boolean this_present_entrance = true;
    boolean that_present_entrance = true;
    if (this_present_entrance || that_present_entrance) {
      if (!(this_present_entrance && that_present_entrance))
        return false;
      if (this.entrance != that.entrance)
        return false;
    }

    boolean this_present_server = true;
    boolean that_present_server = true;
    if (this_present_server || that_present_server) {
      if (!(this_present_server && that_present_server))
        return false;
      if (this.server != that.server)
        return false;
    }

    boolean this_present_entranceId = true && this.isSetEntranceId();
    boolean that_present_entranceId = true && that.isSetEntranceId();
    if (this_present_entranceId || that_present_entranceId) {
      if (!(this_present_entranceId && that_present_entranceId))
        return false;
      if (!this.entranceId.equals(that.entranceId))
        return false;
    }

    boolean this_present_upAppName = true && this.isSetUpAppName();
    boolean that_present_upAppName = true && that.isSetUpAppName();
    if (this_present_upAppName || that_present_upAppName) {
      if (!(this_present_upAppName && that_present_upAppName))
        return false;
      if (!this.upAppName.equals(that.upAppName))
        return false;
    }

    boolean this_present_remoteIp = true && this.isSetRemoteIp();
    boolean that_present_remoteIp = true && that.isSetRemoteIp();
    if (this_present_remoteIp || that_present_remoteIp) {
      if (!(this_present_remoteIp && that_present_remoteIp))
        return false;
      if (!this.remoteIp.equals(that.remoteIp))
        return false;
    }

    boolean this_present_port = true && this.isSetPort();
    boolean that_present_port = true && that.isSetPort();
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTraceId()) ? 131071 : 524287);
    if (isSetTraceId())
      hashCode = hashCode * 8191 + traceId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((isSetAgentId()) ? 131071 : 524287);
    if (isSetAgentId())
      hashCode = hashCode * 8191 + agentId.hashCode();

    hashCode = hashCode * 8191 + ((isSetInvokeId()) ? 131071 : 524287);
    if (isSetInvokeId())
      hashCode = hashCode * 8191 + invokeId.hashCode();

    hashCode = hashCode * 8191 + (int) (invokeType);

    hashCode = hashCode * 8191 + ((isSetAppName()) ? 131071 : 524287);
    if (isSetAppName())
      hashCode = hashCode * 8191 + appName.hashCode();

    hashCode = hashCode * 8191 + cost;

    hashCode = hashCode * 8191 + ((isSetMiddlewareName()) ? 131071 : 524287);
    if (isSetMiddlewareName())
      hashCode = hashCode * 8191 + middlewareName.hashCode();

    hashCode = hashCode * 8191 + ((isSetServiceName()) ? 131071 : 524287);
    if (isSetServiceName())
      hashCode = hashCode * 8191 + serviceName.hashCode();

    hashCode = hashCode * 8191 + ((isSetMethodName()) ? 131071 : 524287);
    if (isSetMethodName())
      hashCode = hashCode * 8191 + methodName.hashCode();

    hashCode = hashCode * 8191 + ((isSetResultCode()) ? 131071 : 524287);
    if (isSetResultCode())
      hashCode = hashCode * 8191 + resultCode.hashCode();

    hashCode = hashCode * 8191 + ((pressureTest) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((debugTest) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((entrance) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((server) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEntranceId()) ? 131071 : 524287);
    if (isSetEntranceId())
      hashCode = hashCode * 8191 + entranceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpAppName()) ? 131071 : 524287);
    if (isSetUpAppName())
      hashCode = hashCode * 8191 + upAppName.hashCode();

    hashCode = hashCode * 8191 + ((isSetRemoteIp()) ? 131071 : 524287);
    if (isSetRemoteIp())
      hashCode = hashCode * 8191 + remoteIp.hashCode();

    hashCode = hashCode * 8191 + ((isSetPort()) ? 131071 : 524287);
    if (isSetPort())
      hashCode = hashCode * 8191 + port;

    return hashCode;
  }

  @Override
  public int compareTo(TStressTestTraceData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTraceId()).compareTo(other.isSetTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceId, other.traceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAgentId()).compareTo(other.isSetAgentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentId, other.agentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInvokeId()).compareTo(other.isSetInvokeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvokeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invokeId, other.invokeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInvokeType()).compareTo(other.isSetInvokeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvokeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invokeType, other.invokeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCost()).compareTo(other.isSetCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cost, other.cost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMiddlewareName()).compareTo(other.isSetMiddlewareName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMiddlewareName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.middlewareName, other.middlewareName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetServiceName()).compareTo(other.isSetServiceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, other.serviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMethodName()).compareTo(other.isSetMethodName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethodName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.methodName, other.methodName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResultCode()).compareTo(other.isSetResultCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultCode, other.resultCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPressureTest()).compareTo(other.isSetPressureTest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPressureTest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pressureTest, other.pressureTest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDebugTest()).compareTo(other.isSetDebugTest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebugTest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debugTest, other.debugTest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEntrance()).compareTo(other.isSetEntrance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntrance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entrance, other.entrance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetServer()).compareTo(other.isSetServer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server, other.server);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEntranceId()).compareTo(other.isSetEntranceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntranceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entranceId, other.entranceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpAppName()).compareTo(other.isSetUpAppName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpAppName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upAppName, other.upAppName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRemoteIp()).compareTo(other.isSetRemoteIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoteIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteIp, other.remoteIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TStressTestTraceData(");
    boolean first = true;

    sb.append("traceId:");
    if (this.traceId == null) {
      sb.append("null");
    } else {
      sb.append(this.traceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("agentId:");
    if (this.agentId == null) {
      sb.append("null");
    } else {
      sb.append(this.agentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("invokeId:");
    if (this.invokeId == null) {
      sb.append("null");
    } else {
      sb.append(this.invokeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("invokeType:");
    sb.append(this.invokeType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("appName:");
    if (this.appName == null) {
      sb.append("null");
    } else {
      sb.append(this.appName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cost:");
    sb.append(this.cost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("middlewareName:");
    if (this.middlewareName == null) {
      sb.append("null");
    } else {
      sb.append(this.middlewareName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceName:");
    if (this.serviceName == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("methodName:");
    if (this.methodName == null) {
      sb.append("null");
    } else {
      sb.append(this.methodName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultCode:");
    if (this.resultCode == null) {
      sb.append("null");
    } else {
      sb.append(this.resultCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pressureTest:");
    sb.append(this.pressureTest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("debugTest:");
    sb.append(this.debugTest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("entrance:");
    sb.append(this.entrance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("server:");
    sb.append(this.server);
    first = false;
    if (!first) sb.append(", ");
    sb.append("entranceId:");
    if (this.entranceId == null) {
      sb.append("null");
    } else {
      sb.append(this.entranceId);
    }
    first = false;
    if (isSetUpAppName()) {
      if (!first) sb.append(", ");
      sb.append("upAppName:");
      if (this.upAppName == null) {
        sb.append("null");
      } else {
        sb.append(this.upAppName);
      }
      first = false;
    }
    if (isSetRemoteIp()) {
      if (!first) sb.append(", ");
      sb.append("remoteIp:");
      if (this.remoteIp == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteIp);
      }
      first = false;
    }
    if (isSetPort()) {
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TStressTestTraceDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TStressTestTraceDataStandardScheme getScheme() {
      return new TStressTestTraceDataStandardScheme();
    }
  }

  private static class TStressTestTraceDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<TStressTestTraceData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TStressTestTraceData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traceId = iprot.readString();
              struct.setTraceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AGENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agentId = iprot.readString();
              struct.setAgentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INVOKE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.invokeId = iprot.readString();
              struct.setInvokeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INVOKE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.invokeType = iprot.readByte();
              struct.setInvokeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // APP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appName = iprot.readString();
              struct.setAppNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cost = iprot.readI32();
              struct.setCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MIDDLEWARE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.middlewareName = iprot.readString();
              struct.setMiddlewareNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SERVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceName = iprot.readString();
              struct.setServiceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // METHOD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.methodName = iprot.readString();
              struct.setMethodNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RESULT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultCode = iprot.readString();
              struct.setResultCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PRESSURE_TEST
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.pressureTest = iprot.readBool();
              struct.setPressureTestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DEBUG_TEST
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.debugTest = iprot.readBool();
              struct.setDebugTestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ENTRANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.entrance = iprot.readBool();
              struct.setEntranceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SERVER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.server = iprot.readBool();
              struct.setServerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ENTRANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entranceId = iprot.readString();
              struct.setEntranceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // UP_APP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.upAppName = iprot.readString();
              struct.setUpAppNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REMOTE_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remoteIp = iprot.readString();
              struct.setRemoteIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TStressTestTraceData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.traceId != null) {
        oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
        oprot.writeString(struct.traceId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.agentId != null) {
        oprot.writeFieldBegin(AGENT_ID_FIELD_DESC);
        oprot.writeString(struct.agentId);
        oprot.writeFieldEnd();
      }
      if (struct.invokeId != null) {
        oprot.writeFieldBegin(INVOKE_ID_FIELD_DESC);
        oprot.writeString(struct.invokeId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INVOKE_TYPE_FIELD_DESC);
      oprot.writeByte(struct.invokeType);
      oprot.writeFieldEnd();
      if (struct.appName != null) {
        oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
        oprot.writeString(struct.appName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COST_FIELD_DESC);
      oprot.writeI32(struct.cost);
      oprot.writeFieldEnd();
      if (struct.middlewareName != null) {
        oprot.writeFieldBegin(MIDDLEWARE_NAME_FIELD_DESC);
        oprot.writeString(struct.middlewareName);
        oprot.writeFieldEnd();
      }
      if (struct.serviceName != null) {
        oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
        oprot.writeString(struct.serviceName);
        oprot.writeFieldEnd();
      }
      if (struct.methodName != null) {
        oprot.writeFieldBegin(METHOD_NAME_FIELD_DESC);
        oprot.writeString(struct.methodName);
        oprot.writeFieldEnd();
      }
      if (struct.resultCode != null) {
        oprot.writeFieldBegin(RESULT_CODE_FIELD_DESC);
        oprot.writeString(struct.resultCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRESSURE_TEST_FIELD_DESC);
      oprot.writeBool(struct.pressureTest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEBUG_TEST_FIELD_DESC);
      oprot.writeBool(struct.debugTest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENTRANCE_FIELD_DESC);
      oprot.writeBool(struct.entrance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVER_FIELD_DESC);
      oprot.writeBool(struct.server);
      oprot.writeFieldEnd();
      if (struct.entranceId != null) {
        oprot.writeFieldBegin(ENTRANCE_ID_FIELD_DESC);
        oprot.writeString(struct.entranceId);
        oprot.writeFieldEnd();
      }
      if (struct.upAppName != null) {
        if (struct.isSetUpAppName()) {
          oprot.writeFieldBegin(UP_APP_NAME_FIELD_DESC);
          oprot.writeString(struct.upAppName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remoteIp != null) {
        if (struct.isSetRemoteIp()) {
          oprot.writeFieldBegin(REMOTE_IP_FIELD_DESC);
          oprot.writeString(struct.remoteIp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPort()) {
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TStressTestTraceDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TStressTestTraceDataTupleScheme getScheme() {
      return new TStressTestTraceDataTupleScheme();
    }
  }

  private static class TStressTestTraceDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<TStressTestTraceData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TStressTestTraceData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTraceId()) {
        optionals.set(0);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(1);
      }
      if (struct.isSetAgentId()) {
        optionals.set(2);
      }
      if (struct.isSetInvokeId()) {
        optionals.set(3);
      }
      if (struct.isSetInvokeType()) {
        optionals.set(4);
      }
      if (struct.isSetAppName()) {
        optionals.set(5);
      }
      if (struct.isSetCost()) {
        optionals.set(6);
      }
      if (struct.isSetMiddlewareName()) {
        optionals.set(7);
      }
      if (struct.isSetServiceName()) {
        optionals.set(8);
      }
      if (struct.isSetMethodName()) {
        optionals.set(9);
      }
      if (struct.isSetResultCode()) {
        optionals.set(10);
      }
      if (struct.isSetPressureTest()) {
        optionals.set(11);
      }
      if (struct.isSetDebugTest()) {
        optionals.set(12);
      }
      if (struct.isSetEntrance()) {
        optionals.set(13);
      }
      if (struct.isSetServer()) {
        optionals.set(14);
      }
      if (struct.isSetEntranceId()) {
        optionals.set(15);
      }
      if (struct.isSetUpAppName()) {
        optionals.set(16);
      }
      if (struct.isSetRemoteIp()) {
        optionals.set(17);
      }
      if (struct.isSetPort()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetTraceId()) {
        oprot.writeString(struct.traceId);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetAgentId()) {
        oprot.writeString(struct.agentId);
      }
      if (struct.isSetInvokeId()) {
        oprot.writeString(struct.invokeId);
      }
      if (struct.isSetInvokeType()) {
        oprot.writeByte(struct.invokeType);
      }
      if (struct.isSetAppName()) {
        oprot.writeString(struct.appName);
      }
      if (struct.isSetCost()) {
        oprot.writeI32(struct.cost);
      }
      if (struct.isSetMiddlewareName()) {
        oprot.writeString(struct.middlewareName);
      }
      if (struct.isSetServiceName()) {
        oprot.writeString(struct.serviceName);
      }
      if (struct.isSetMethodName()) {
        oprot.writeString(struct.methodName);
      }
      if (struct.isSetResultCode()) {
        oprot.writeString(struct.resultCode);
      }
      if (struct.isSetPressureTest()) {
        oprot.writeBool(struct.pressureTest);
      }
      if (struct.isSetDebugTest()) {
        oprot.writeBool(struct.debugTest);
      }
      if (struct.isSetEntrance()) {
        oprot.writeBool(struct.entrance);
      }
      if (struct.isSetServer()) {
        oprot.writeBool(struct.server);
      }
      if (struct.isSetEntranceId()) {
        oprot.writeString(struct.entranceId);
      }
      if (struct.isSetUpAppName()) {
        oprot.writeString(struct.upAppName);
      }
      if (struct.isSetRemoteIp()) {
        oprot.writeString(struct.remoteIp);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TStressTestTraceData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.traceId = iprot.readString();
        struct.setTraceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.agentId = iprot.readString();
        struct.setAgentIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.invokeId = iprot.readString();
        struct.setInvokeIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.invokeType = iprot.readByte();
        struct.setInvokeTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.appName = iprot.readString();
        struct.setAppNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cost = iprot.readI32();
        struct.setCostIsSet(true);
      }
      if (incoming.get(7)) {
        struct.middlewareName = iprot.readString();
        struct.setMiddlewareNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.serviceName = iprot.readString();
        struct.setServiceNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.methodName = iprot.readString();
        struct.setMethodNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.resultCode = iprot.readString();
        struct.setResultCodeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.pressureTest = iprot.readBool();
        struct.setPressureTestIsSet(true);
      }
      if (incoming.get(12)) {
        struct.debugTest = iprot.readBool();
        struct.setDebugTestIsSet(true);
      }
      if (incoming.get(13)) {
        struct.entrance = iprot.readBool();
        struct.setEntranceIsSet(true);
      }
      if (incoming.get(14)) {
        struct.server = iprot.readBool();
        struct.setServerIsSet(true);
      }
      if (incoming.get(15)) {
        struct.entranceId = iprot.readString();
        struct.setEntranceIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.upAppName = iprot.readString();
        struct.setUpAppNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.remoteIp = iprot.readString();
        struct.setRemoteIpIsSet(true);
      }
      if (incoming.get(18)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

